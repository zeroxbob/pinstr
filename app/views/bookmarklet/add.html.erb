<div id="form-container">
  <h1>Save Bookmark to Pinstr</h1>

  <div id="nostr-status" class="nostr-status">
    Checking for Nostr extension...
  </div>

  <div id="form-error" style="display: none;" class="alert"></div>

  <%= form_with(model: @bookmark, url: create_from_bookmarklet_path, id: "bookmark-form") do |form| %>
    <% if @bookmark.errors.any? %>
      <div class="alert">
        <h2><%= pluralize(@bookmark.errors.count, "error") %> prohibited this bookmark from being saved:</h2>
        <ul>
          <% @bookmark.errors.each do |error| %>
            <li><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <div class="form-group">
      <%= form.label :title %>
      <%= form.text_field :title, required: true, id: "bookmark-title" %>
    </div>

    <div class="form-group">
      <%= form.label :url %>
      <%= form.text_field :url, required: true, id: "bookmark-url" %>
    </div>

    <div class="form-group">
      <%= form.label :description %>
      <%= form.text_area :description, id: "bookmark-description" %>
    </div>

    <% if @in_popup %>
      <%= hidden_field_tag :popup, "true" %>
    <% end %>

    <div class="actions">
      <button type="button" class="btn btn-secondary" onclick="window.close()">Cancel</button>
      <%= form.submit "Save Bookmark", class: "btn btn-primary", id: "submit-button" %>
    </div>
  <% end %>
  
  <div class="nostr-help mt-3">
    <p><small>
      <strong>Note:</strong> If you have a Nostr extension installed (like nos2x or Alby), you'll be prompted to sign this bookmark.
      <a href="<%= debug_bookmarklet_path %>" target="_blank">Nostr extension not working?</a>
    </small></p>
  </div>
</div>

<!-- Embedded JavaScript - bypassing Stimulus since it's not loading -->
<script>
  // Global variables to track Nostr readiness
  window.nostrReady = false;
  window.nostrExtensionFound = false;
  let formSubmitting = false;

  // Check if we're in a popup window
  const isPopup = new URLSearchParams(window.location.search).get('popup') === 'true';
  console.log('ü™ü Running in popup mode:', isPopup);

  // Patient Nostr detection - similar to the debug page
  (function() {
    const statusElement = document.getElementById('nostr-status');
    if (!statusElement) return;
    
    let checkCount = 0;
    const maxChecks = 10; // Try for 10 seconds
    const checkInterval = 1000; // Check every second
    
    function checkForNostr() {
      checkCount++;
      console.log(`Nostr check attempt ${checkCount}/${maxChecks} in bookmarklet popup`);
      
      // Debug: Log what's available in window
      console.log('window.nostr exists:', !!window.nostr);
      
      if (window.nostr) {
        console.log('window.nostr type:', typeof window.nostr);
        console.log('window.nostr object keys:', Object.keys(window.nostr));
        console.log('getPublicKey available:', typeof window.nostr.getPublicKey);
        console.log('signEvent available:', typeof window.nostr.signEvent);
        
        const hasPubkey = typeof window.nostr.getPublicKey === 'function';
        const hasSignEvent = typeof window.nostr.signEvent === 'function';
        
        if (hasPubkey && hasSignEvent) {
          // Success! Nostr is ready
          window.nostrReady = true;
          window.nostrExtensionFound = true;
          
          statusElement.textContent = "Nostr extension detected ‚úì";
          statusElement.className = "nostr-status nostr-status-connected";
          console.log('‚úì Nostr extension fully detected and ready in bookmarklet popup');
          
          // Try to get pubkey to verify it's really working
          window.nostr.getPublicKey()
            .then(pubkey => {
              statusElement.textContent = `Nostr extension ready: ${pubkey.substring(0, 8)}...`;
              console.log('‚úì Nostr pubkey retrieved successfully in popup:', pubkey);
            })
            .catch(err => {
              console.log('Note: Error getting pubkey (user may need to approve):', err.message);
              // Don't change status - extension is still ready, user just needs to approve
            });
          
          return; // Stop checking
        } else {
          let missingMethods = [];
          if (!hasPubkey) missingMethods.push("getPublicKey");
          if (!hasSignEvent) missingMethods.push("signEvent");
          
          statusElement.textContent = `Nostr extension missing: ${missingMethods.join(", ")}`;
          statusElement.className = "nostr-status nostr-status-error";
          console.log('‚úó Nostr extension found but missing methods:', missingMethods);
          return; // Stop checking
        }
      } else if (checkCount >= maxChecks) {
        // We've tried enough times, give up
        window.nostrReady = false;
        window.nostrExtensionFound = false;
        
        statusElement.textContent = "No Nostr extension detected. Bookmark will be saved without signing.";
        statusElement.className = "nostr-status nostr-status-disconnected";
        console.log('‚úó No Nostr extension found after', maxChecks, 'seconds in popup');
        return;
      } else {
        // Still checking
        statusElement.textContent = `Checking for Nostr extension... (${checkCount}/${maxChecks})`;
        console.log(`‚è≥ Nostr not found yet in popup, continuing to check... (${checkCount}/${maxChecks})`);
        setTimeout(checkForNostr, checkInterval);
      }
    }
    
    // Start checking immediately
    checkForNostr();
  })();

  // Function to show success message and auto-close
  function showSuccessAndClose(message, nostrSigned) {
    console.log('üéâ Showing success message and preparing to close');
    
    const container = document.getElementById('form-container');
    
    // Show success message with Nostr status
    let nostrStatusHtml = '';
    if (nostrSigned) {
      nostrStatusHtml = '<div class="success-nostr-status success">‚úì Bookmark signed with Nostr and will be published to relays</div>';
    } else {
      nostrStatusHtml = '<div class="success-nostr-status warning">‚ÑπÔ∏è Bookmark saved without Nostr signing</div>';
    }
    
    container.innerHTML = `
      <div class="success-message">
        <h2>Bookmark Saved!</h2>
        <p>${message || 'Your bookmark has been successfully saved to Pinstr.'}</p>
        ${nostrStatusHtml}
        <div class="auto-close-notice">
          <p><small>This window will close automatically in <span id="countdown">3</span> seconds...</small></p>
          <div class="buttons">
            <button type="button" class="btn btn-primary" onclick="window.close()">Close Now</button>
          </div>
        </div>
      </div>
    `;
    
    // Countdown and auto-close
    let countdown = 3;
    const countdownElement = document.getElementById('countdown');
    
    const countdownInterval = setInterval(() => {
      countdown--;
      if (countdownElement) {
        countdownElement.textContent = countdown;
      }
      
      if (countdown <= 0) {
        clearInterval(countdownInterval);
        console.log('‚è∞ Auto-closing popup window');
        
        // Only close if we're actually in a popup
        if (isPopup) {
          window.close();
        } else {
          // If not in popup, redirect to bookmarks page
          window.location.href = '/bookmarks';
        }
      }
    }, 1000);
  }

  // Form submission handler
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('bookmark-form');
    const submitButton = document.getElementById('submit-button');
    
    if (!form) {
      console.error('Form not found!');
      return;
    }
    
    console.log('üéØ EMBEDDED JS: Form handler attached');
    
    form.addEventListener('submit', async function(event) {
      console.log('üéØ EMBEDDED JS: Form submit intercepted');
      
      // Prevent default form submission
      event.preventDefault();
      
      // Prevent multiple submissions
      if (formSubmitting) {
        console.log('Form already submitting, ignoring duplicate');
        return;
      }
      
      formSubmitting = true;
      
      // Disable submit button
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.textContent = 'Saving...';
      }
      
      try {
        // Get form data
        const title = document.getElementById('bookmark-title').value;
        const url = document.getElementById('bookmark-url').value;
        const description = document.getElementById('bookmark-description').value || '';
        
        console.log('üìù Form data:', { title, url, description });
        
        // Update status
        const statusElement = document.getElementById('nostr-status');
        if (statusElement) {
          statusElement.textContent = "Processing bookmark...";
          statusElement.className = "nostr-status";
        }
        
        // Check Nostr readiness
        console.log('üîç Checking Nostr readiness...');
        console.log('  window.nostrReady:', window.nostrReady);
        console.log('  window.nostr exists:', !!window.nostr);
        
        // Try Nostr signing if available
        let nostrSuccess = false;
        
        if (window.nostrReady === true && window.nostr && 
            typeof window.nostr.getPublicKey === 'function' && 
            typeof window.nostr.signEvent === 'function') {
          try {
            console.log('üîê Attempting Nostr signing...');
            if (statusElement) {
              statusElement.textContent = "Attempting Nostr signing...";
            }
            
            nostrSuccess = await attemptNostrSigning(title, url, description, statusElement);
            console.log('üéØ CRITICAL: Nostr signing result:', nostrSuccess);
          } catch (error) {
            console.error('‚ùå Error in Nostr signing:', error);
            if (statusElement) {
              statusElement.textContent = `Nostr error: ${error.message}. Submitting without signing.`;
              statusElement.className = "nostr-status nostr-status-error";
            }
          }
        } else {
          console.log('‚ùå Nostr not ready, submitting directly');
          if (statusElement) {
            statusElement.textContent = "No Nostr extension ready. Submitting directly.";
            statusElement.className = "nostr-status nostr-status-disconnected";
          }
        }
        
        // If Nostr signing didn't work, submit directly
        if (!nostrSuccess) {
          console.log('üì§ Falling back to direct submission');
          await submitFormDirectly(title, url, description);
        }
      } catch (error) {
        console.error('‚ùå Unhandled error:', error);
        
        // Re-enable form
        formSubmitting = false;
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.textContent = 'Save Bookmark';
        }
        
        alert('An error occurred: ' + error.message);
      }
    });
  });
  
  // Nostr signing function
  async function attemptNostrSigning(title, url, description, statusElement) {
    console.log('üîê Starting Nostr signing attempt');
    
    try {
      // Step 1: Get public key
      console.log('üîë Step 1: Getting public key...');
      if (statusElement) {
        statusElement.textContent = "Requesting Nostr public key...";
      }
      
      const pubkey = await window.nostr.getPublicKey();
      console.log('‚úÖ Got pubkey:', pubkey);
      
      // Step 2: Prepare event
      console.log('üìù Step 2: Preparing event...');
      if (statusElement) {
        statusElement.textContent = "Preparing Nostr event...";
      }
      
      const event = prepareNostrEvent(title, url, description, pubkey);
      console.log('‚úÖ Prepared event:', event);
      
      // Step 3: Sign event
      console.log('‚úçÔ∏è Step 3: Requesting signature...');
      if (statusElement) {
        statusElement.textContent = "Requesting Nostr signature...";
      }
      
      const signedEvent = await window.nostr.signEvent(event);
      console.log('‚úÖ Got signed event:', signedEvent);
      
      // Step 4: Validate
      if (!signedEvent || !signedEvent.sig || !signedEvent.id) {
        console.error('‚ùå Invalid signed event');
        return false;
      }
      
      // Step 5: Submit to server
      console.log('üöÄ Step 5: Submitting to server...');
      if (statusElement) {
        statusElement.textContent = "Successfully signed! Submitting...";
        statusElement.className = "nostr-status nostr-status-connected";
      }
      
      const result = await submitToServer(signedEvent, title, url, description, true);
      return result;
    } catch (error) {
      console.error('‚ùå Error in Nostr signing:', error);
      throw error;
    }
  }
  
  // Prepare Nostr event
  function prepareNostrEvent(title, url, description, pubkey) {
    // Extract d-tag from URL
    const urlWithoutScheme = extractUrlDTag(url);
    console.log('üè∑Ô∏è Extracted d-tag:', urlWithoutScheme);
    
    const now = Math.floor(Date.now() / 1000);
    
    const tags = [
      ["d", urlWithoutScheme],
      ["title", title],
      ["published_at", now.toString()]
    ];
    
    // Add hashtags
    const hashtags = extractHashtags(description);
    hashtags.forEach(tag => {
      tags.push(["t", tag]);
    });
    
    return {
      kind: 39701,
      pubkey: pubkey,
      created_at: now,
      tags: tags,
      content: description
    };
  }
  
  // Extract d-tag from URL
  function extractUrlDTag(url) {
    try {
      let fullUrl = url;
      if (!url.match(/^https?:\/\//i)) {
        fullUrl = "https://" + url;
      }
      
      const urlObj = new URL(fullUrl);
      return urlObj.hostname + urlObj.pathname;
    } catch (e) {
      console.error("Error parsing URL:", e);
      return url.replace(/^https?:\/\//i, '');
    }
  }
  
  // Extract hashtags
  function extractHashtags(content) {
    if (!content) return [];
    
    const hashtags = [];
    const matches = content.match(/(?:\s|^)#([\w\d]+)/g) || [];
    
    matches.forEach(match => {
      const tag = match.trim().substring(1);
      if (tag && tag.length > 0) {
        hashtags.push(tag);
      }
    });
    
    return hashtags;
  }
  
  // Submit to server with signed event
  async function submitToServer(signedEvent, title, url, description, nostrSigned = false) {
    console.log('üì§ Submitting to server with signed event');
    console.log('üì§ Signed event:', signedEvent);
    
    const csrfToken = document.querySelector('meta[name="csrf-token"]').content;
    
    const payload = {
      signed_event: signedEvent,
      bookmark: {
        title: title,
        url: url,
        description: description
      },
      popup: isPopup ? true : undefined
    };
    
    console.log('üì§ Full payload:', JSON.stringify(payload, null, 2));
    
    try {
      const response = await fetch('<%= create_from_bookmarklet_path %>', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-CSRF-Token': csrfToken
        },
        body: JSON.stringify(payload)
      });
      
      console.log('üì• Server response status:', response.status);
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå Server error:', errorData);
        throw new Error(errorData.errors ? errorData.errors.join(', ') : 'Server error');
      }
      
      const data = await response.json();
      console.log('‚úÖ Server success:', data);
      
      // Show success message and auto-close
      showSuccessAndClose('Your bookmark has been successfully saved and signed with Nostr.', true);
      
      return true;
    } catch (error) {
      console.error('‚ùå Error submitting to server:', error);
      alert('Failed to save bookmark: ' + error.message);
      return false;
    }
  }
  
  // Submit form directly (without Nostr)
  async function submitFormDirectly(title, url, description) {
    console.log('üì§ Submitting form directly without Nostr');
    
    const form = document.getElementById('bookmark-form');
    const formData = new FormData(form);
    formData.append('direct_submission', 'true');
    
    try {
      const response = await fetch('<%= create_from_bookmarklet_path %>', {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'text/html,application/xhtml+xml'
        },
        redirect: 'follow'
      });
      
      console.log('üì§ Direct submission response:', response);
      
      if (response.ok) {
        // Show success message and auto-close
        showSuccessAndClose('Your bookmark has been successfully saved.', false);
      } else {
        throw new Error('Server returned an error');
      }
    } catch (error) {
      console.error('‚ùå Error in direct submission:', error);
      alert('Failed to submit form: ' + error.message);
      
      // Re-enable form
      formSubmitting = false;
      const submitButton = document.getElementById('submit-button');
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.textContent = 'Save Bookmark';
      }
    }
  }
</script>

<style>
  #form-error {
    background-color: #f8d7da;
    color: #721c24;
    padding: 0.75rem;
    border-radius: 4px;
    margin-bottom: 1rem;
    display: none;
  }
  
  .nostr-status {
    background-color: #f8f9fa;
    padding: 8px 12px;
    border-radius: 4px;
    margin-bottom: 16px;
    font-size: 14px;
    color: #6c757d;
    border-left: 4px solid #adb5bd;
  }
  
  .nostr-status-connected {
    background-color: #d1e7dd;
    border-left: 4px solid #198754;
    color: #0f5132;
  }
  
  .nostr-status-disconnected {
    background-color: #fff3cd;
    border-left: 4px solid #ffc107;
    color: #664d03;
  }
  
  .nostr-status-error {
    background-color: #f8d7da;
    border-left: 4px solid #dc3545;
    color: #842029;
  }
  
  .success-message {
    text-align: center;
    padding: 2rem 0;
  }
  
  .success-message h2 {
    color: #198754;
    margin-bottom: 1rem;
  }
  
  .success-nostr-status {
    background-color: #f8f9fa;
    padding: 12px;
    border-radius: 4px;
    margin: 16px auto;
    max-width: 80%;
    font-size: 14px;
    border-left: 4px solid #adb5bd;
  }
  
  .success-nostr-status.success {
    background-color: #d1e7dd;
    border-left: 4px solid #198754;
    color: #0f5132;
  }
  
  .success-nostr-status.warning {
    background-color: #fff3cd;
    border-left: 4px solid #ffc107;
    color: #664d03;
  }
  
  .auto-close-notice {
    margin-top: 1rem;
    color: #6c757d;
  }
  
  .buttons {
    margin-top: 1.5rem;
    display: flex;
    justify-content: center;
    gap: 1rem;
  }
  
  .nostr-help {
    text-align: center;
    color: #6c757d;
    font-size: 0.9rem;
  }
  
  .mt-3 {
    margin-top: 1rem;
  }
  
  #countdown {
    font-weight: bold;
    color: #0066cc;
  }
</style>
